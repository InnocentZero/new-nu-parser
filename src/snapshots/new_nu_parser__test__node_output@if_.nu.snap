---
source: src/test.rs
expression: evaluate_example(path)
input_file: tests/if_.nu
---
0: Variable (4 to 5)
1: Int (8 to 11)
2: Let { variable_name: NodeId(0), ty: None, initializer: NodeId(1), is_mutable: false } (0 to 11)
3: Variable (16 to 18)
4: LessThan (19 to 20)
5: Int (21 to 24)
6: BinaryOp { lhs: NodeId(3), op: NodeId(4), rhs: NodeId(5) } (16 to 24)
7: Int (31 to 32)
8: Block(BlockId(0)) (25 to 35)
9: Garbage (40 to 42)
10: Variable (43 to 45)
11: GreaterThan (46 to 47)
12: Int (48 to 51)
13: BinaryOp { lhs: NodeId(10), op: NodeId(11), rhs: NodeId(12) } (43 to 51)
14: Int (58 to 59)
15: Block(BlockId(1)) (58 to 60)
16: Closure { params: None, block: NodeId(15) } (52 to 62)
17: Name (62 to 66)
18: Int (73 to 74)
19: Block(BlockId(2)) (73 to 75)
20: Closure { params: None, block: NodeId(19) } (67 to 76)
21: Block(BlockId(3)) (40 to 77)
22: If { condition: NodeId(6), then_block: NodeId(8), else_block: Some(NodeId(21)) } (13 to 77)
23: Block(BlockId(4)) (0 to 77)

